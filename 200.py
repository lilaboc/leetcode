# https://leetcode.com/problems/number-of-islands/

from typing import List 
from queue import Queue

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        seen = set()
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if (x, y) not in seen:
                    if  grid[x][y] == '1':
                        grid[x][y] = '0'
                        q = Queue()
                        q.put((x, y))
                        while not q.empty():
                            v = q.get()
                            a , b = v[0], v[1]
                            seen.add((a, b))
                            if a + 1 < len(grid) and grid[a + 1][b] == '1':
                                nx, ny = a + 1, b
                                if (nx, ny) not in seen:
                                    grid[nx][ny] = '0'
                                    q.put((nx, ny))
                            if b + 1 < len(grid[0]) and grid[a][b + 1] == '1':
                                nx, ny = a, b + 1
                                if (nx, ny) not in seen:
                                    grid[nx][ny] = '0'
                                    q.put((nx, ny))
                            if b - 1 >= 0 and grid[a][b - 1] == '1':
                                nx, ny = a, b - 1
                                if (nx, ny) not in seen:
                                    grid[nx][ny] = '0'
                                    q.put((nx, ny))
                            if a - 1 >= 0 and grid[a - 1][b] == '1':
                                nx, ny = a - 1, b
                                grid[nx][ny] = '0'
                                if (nx, ny) not in seen:
                                    grid[nx][ny] = '0'
                                    q.put((nx, ny))
                        count += 1
        return count
                        
                        






# print(Solution().numIslands(
# [['1', '1', '1', '1', '0'],
# ['1', '1', '0', '1', '0'],
# ['1', '1', '0', '0', '0'],
# ['0', '0', '0', '0', '0']]))



# print(Solution().numIslands(
# [['1', '1', '0', '0', '0'],
# ['1', '1', '0', '0', '0'],
# ['0', '0', '1', '0', '0'],
# ['0', '0', '0', '1', '1']]))

# print(Solution().numIslands([["1","1","1"],["0","1","0"],["1","1","1"]]))
# print(Solution().numIslands([["1","0","1","1","1"],["1","0","1","0","1"],["1","1","1","0","1"]]))
# print(Solution().numIslands([["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]))



print(Solution().numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))